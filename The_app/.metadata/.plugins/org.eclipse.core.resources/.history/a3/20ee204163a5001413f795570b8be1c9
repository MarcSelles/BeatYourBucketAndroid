package com.byb.beatyourbucket;

import java.util.HashMap;
import java.util.List;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.squareup.picasso.Picasso;

public class BucketlistAdapter extends ArrayAdapter<String>{
	HashMap<String, Integer> hmID = new HashMap<String, Integer>();
	private final Activity context;
	private final int viewresourseId;
	private final List<String> objects;
	private final List<String> imageURL;
	public BucketlistAdapter(Activity context, int viewresourseId, List<String> objects, List<String> imageURL) {
		// TODO Auto-generated constructor stub
		super (context, viewresourseId, objects);
		this.context = context;
		this.viewresourseId = viewresourseId;
		this.objects = objects;
		this.imageURL = imageURL;
	}
	
	@Override
	public View getView(int position, View convertview, ViewGroup parent){
	
		LayoutInflater inflater = (LayoutInflater) context
		        .getSystemService(context.LAYOUT_INFLATER_SERVICE);
		View viewOfRow=inflater.inflate(R.layout.list_layout, parent, false);
		TextView textview = (TextView) viewOfRow.findViewById(R.id.textView);
		ImageView imageView = (ImageView) viewOfRow.findViewById(R.id.imageView);
		scaleImage(imageView, 100);
		textview.setText(objects.get(position));
		Picasso.with(context).load(imageURL.get(position)).into(imageView);
		return viewOfRow;
		
	}
	
	private void scaleImage(ImageView view, int boundBoxInDp)
	{
	    // Get the ImageView and its bitmap
	    Drawable drawing = view.getDrawable();
	    Log.d("drawing", drawing);
	    Bitmap bitmap = ((BitmapDrawable)drawing).getBitmap();

	    // Get current dimensions
	    int width = bitmap.getWidth();
	    int height = bitmap.getHeight();

	    // Determine how much to scale: the dimension requiring less scaling is
	    // closer to the its side. This way the image always stays inside your
	    // bounding box AND either x/y axis touches it.
	    float xScale = ((float) boundBoxInDp) / width;
	    float yScale = ((float) boundBoxInDp) / height;
	    float scale = (xScale <= yScale) ? xScale : yScale;

	    // Create a matrix for the scaling and add the scaling data
	    Matrix matrix = new Matrix();
	    matrix.postScale(scale, scale);

	    // Create a new bitmap and convert it to a format understood by the ImageView
	    Bitmap scaledBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
	    BitmapDrawable result = new BitmapDrawable(scaledBitmap);
	    width = scaledBitmap.getWidth();
	    height = scaledBitmap.getHeight();

	    // Apply the scaled bitmap
	    view.setImageDrawable(result);

	    // Now change ImageView's dimensions to match the scaled image
	    LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) view.getLayoutParams();
	    params.width = width;
	    params.height = height;
	    view.setLayoutParams(params);
	}

//	private int dpToPx(int dp)
//	{
//	    float density = getApplicationContext().getResources().getDisplayMetrics().density;
//	    return Math.round((float)dp * density);
//	}
	
}